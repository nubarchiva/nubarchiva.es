{"version":3,"file":"component---src-pages-404-tsx-319dce061a7a8cf6975a.js","mappings":"8LA4BA,MAvB0BA,KACxB,MAAQC,YAAaC,IAA+BC,EAAAA,EAAAA,IAAe,aASnE,OACEC,EAAAA,cAAA,MAAIC,UAAW,cACZH,EAAKI,MAAMC,KAAI,CAACC,EAAMC,IAEnBL,EAAAA,cAAA,MAAIM,IAAKD,GACPL,EAAAA,cAACO,EAAAA,GAAI,CAACC,GAAE,GAAKJ,EAAKK,MAASL,EAAKK,SAInC,ECXT,MAT6BC,IAEzBV,EAAAA,cAAA,OAAKC,UAAW,iBACdD,EAAAA,cAAA,UAAI,kCACJA,EAAAA,cAACJ,EAAO,O,UCUd,MAZqBe,IAAgD,IAAAC,EAAAC,EAAA,IAA/C,KAAEf,GAAwCa,EAC9D,OACEX,EAAAA,cAACc,EAAAA,EAAM,CACLC,YAA0B,QAAdH,EAAAd,EAAKkB,iBAAS,IAAAJ,GAAO,QAAPC,EAAdD,EAAgBV,aAAK,IAAAW,OAAP,EAAdA,EAAuBV,KAAKc,IAAI,IAAAC,EAAA,OAA6B,QAA7BA,EAAKD,EAAKE,2BAAmB,IAAAD,OAAA,EAAxBA,EAA0BE,WAAW,MAAK,GAC3FC,iBAAeC,EAAAA,EAAAA,GAAMxB,EAAKyB,YAAYrB,MAAMC,KAAKc,GAASA,EAAKO,SAC/DC,YAAa,OAEbzB,EAAAA,cAACU,EAAU,MACJ,C","sources":["webpack://skeleton-ts/./src/modules/TreeWeb/TreeWeb.tsx","webpack://skeleton-ts/./src/modules/Content404/Content404.tsx","webpack://skeleton-ts/./src/pages/404.tsx"],"sourcesContent":["import \"./tree-web.scss\";\n\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport * as React from \"react\";\n\nconst TreeWeb: React.FC = () => {\n  const { allSitePage: data }: Queries.TreeWebQuery = useStaticQuery(graphql`\n    query TreeWeb($regex: String = \"/^((?!404).)*$/\") {\n      allSitePage(filter: { path: { regex: $regex } }) {\n        nodes {\n          path\n        }\n      }\n    }\n  `);\n  return (\n    <ul className={\"m-tree-web\"}>\n      {data.nodes.map((node, index) => {\n        return (\n          <li key={index}>\n            <Link to={`${node.path}`}>{node.path}</Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TreeWeb;\n","import * as React from \"react\";\n\nimport TreeWeb from \"../TreeWeb/TreeWeb\";\n\nconst Content404: React.FC = () => {\n  return (\n    <div className={\"c-content-404\"}>\n      <h2>Quizás este aquí lo que buscas</h2>\n      <TreeWeb />\n    </div>\n  );\n};\n\nexport default Content404;\n","import { graphql, PageProps } from \"gatsby\";\nimport * as React from \"react\";\n\nimport Content404 from \"../modules/Content404/Content404\";\nimport Layout from \"../modules/Layout/Layout\";\n\nconst NotFoundPage = ({ data }: PageProps<Queries.l404PageQuery>) => {\n  return (\n    <Layout\n      legalLinks={data.allLegals?.nodes?.map((item) => item.childMarkdownRemark?.frontmatter) || []}\n      navbarLinksList={[...data.navbarLinks.nodes.map((item) => item.metas)]}\n      landingName={\"404\"}\n    >\n      <Content404 />\n    </Layout>\n  );\n};\n\nexport default NotFoundPage;\n\nexport const query = graphql`\n  query l404Page($lang: String = \"es_es\") {\n    navbarLinks: allPage(filter: { lang: { eq: $lang } }, sort: { settings: { order: ASC } }) {\n      nodes {\n        metas {\n          name\n          slug\n        }\n      }\n    }\n    allLegals: allFile(\n      filter: { sourceInstanceName: { eq: \"legal\" }, relativeDirectory: { eq: $lang } }\n      sort: { childMarkdownRemark: { frontmatter: { order: ASC } } }\n    ) {\n      nodes {\n        childMarkdownRemark {\n          frontmatter {\n            slug\n            name: title\n          }\n          id\n        }\n        relativeDirectory\n      }\n    }\n  }\n`;\n"],"names":["TreeWeb","allSitePage","data","useStaticQuery","React","className","nodes","map","node","index","key","Link","to","path","Content404","_ref","_data$allLegals","_data$allLegals$nodes","Layout","legalLinks","allLegals","item","_item$childMarkdownRe","childMarkdownRemark","frontmatter","navbarLinksList","_toConsumableArray","navbarLinks","metas","landingName"],"sourceRoot":""}